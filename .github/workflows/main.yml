name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: llm_advisor_app/package-lock.json

      - name: Install & Build NextJS
        working-directory: llm_advisor_app
        run: |
          npm ci
          npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          # Give it a name and list out all the files/folders we want
          # to include in the artifact.
          name: frontend-build
          path: |
            llm_advisor_app/.next
            llm_advisor_app/package.json
            llm_advisor_app/package-lock.json
            llm_advisor_app/public
            llm_advisor_app/next.config.js

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install AWS SAM CLI
        run: |
          python -m pip install --upgrade pip
          pip install aws-sam-cli

      - name: Build Backend with SAM
        working-directory: backend
        run: sam build

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/.aws-sam/build

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [build-backend]
    environment: production
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/.aws-sam/build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Backend with SAM
        working-directory: backend
        run: |
          sam deploy --stack-name my-backend-stack \
            --capabilities CAPABILITY_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --s3-bucket artifacts-llm-advisor-cloudform \
            --no-confirm-changeset \
            --parameter-overrides "Environment=prod" \
            --no-fail-on-empty-changeset

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    environment: production
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-dist

      - name: Show local artifact folder (debug)
        run: ls -R frontend-dist

      - name: Prepare Deployment Directory on Lightsail
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            mkdir -p ~/frontend-temp
            rm -rf ~/frontend-temp/*

      - name: Copy Files to Lightsail
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: "frontend-dist/llm_advisor_app/*"
          target: "/home/ubuntu/frontend-temp"
          strip_components: 0

      - name: Finalize Deployment on Lightsail
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            # Stop the current application if running
            pm2 delete advisor_app || true

            # Backup current frontend
            mv ~/frontend ~/frontend-old || true

            # Move in the freshly uploaded build
            mv ~/frontend-temp ~/frontend

            echo "Check that .next/ is in ~/frontend..."
            ls -R ~/frontend

            # Install production dependencies
            cd ~/frontend
            npm ci --production

            # Start the Next.js app with PM2
            # (This just runs "npm run start", which expects 
            #  a built .next folder)
            pm2 start npm --name "advisor_app" -- start

            # Clean up the old version
            rm -rf ~/frontend-old

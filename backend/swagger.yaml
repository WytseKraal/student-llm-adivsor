openapi: 3.0.0
info:
  title: Student Advisor API
  version: 1.0.0
  description: API for student advisor application
servers:
  - url: http://localhost:3001/
    description: Local development
  - url: https://{apiId}.execute-api.eu-north-1.amazonaws.com/Prod
    description: Production environment
    variables:
      apiId:
        default: 26jbdrdk5g
components:
  securitySchemes:
    CognitoAuth:
      type: oauth2
      x-oauth2-redirect-url: http://localhost/oauth2-redirect.html
      flows:
        implicit:
          authorizationUrl: https://eu-north-1cxdmnsswh.auth.eu-north-1.amazoncognito.com/oauth2/authorize
          clientId: 29sfsu3nvhqfsjjnimcgh9ejab
          redirectUrl: http://localhost/oauth2-redirect.html
          scopes: {}
paths:
  /hello:
    get:
      summary: Hello endpoint
      description: Returns a hello message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "hello"
  /goodbye/bye:
    get:
      summary: Goodbye endpoint
      description: Returns a goodbye message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "goodbye"
  /goodbye/seeya:
    get:
      summary: See ya endpoint
      description: Returns a see ya message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "see ya"
  /student:
    get:
      summary: Get student information
      description: Retrieves a student by ID
      security:
        - CognitoAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: Student ID
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  advisor:
                    type: string
        "404":
          description: Student not found
        "400":
          description: Invalid request
        "500":
          description: Server error
    put:
      summary: Create or update student
      description: Creates or updates a student record
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
                name:
                  type: string
                advisor:
                  type: string
      responses:
        "200":
          description: Student created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student created successfully"
        "400":
          description: Invalid request
        "500":
          description: Server error
  /student/check:
    get:
      summary: Check if student exists
      description: Checks if a student ID exists in the database
      security:
        - CognitoAuth: []
      parameters:
        - name: student_id
          in: query
          required: true
          description: Student ID to check
          schema:
            type: string
      responses:
        "200":
          description: Successful check
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: True if student exists, false otherwise
                    example: true
        "400":
          description: Invalid request (missing student_id parameter)
        "401":
          description: Unauthorized request (missing or invalid Cognito token)
        "500":
          description: Server error
  /chat:
    post:
      summary: Chat with the AI assistant
      description: Sends a message to the chatbot and receives a response.
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  example: "Hello, how can you help me?"
      responses:
        "200":
          description: Successful chatbot response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: "Hello! How can I assist you today?"
        "400":
          description: Invalid request (e.g., missing message field or malformed JSON)
        "401":
          description: Unauthorized request (missing or invalid Cognito token)
        "500":
          description: Internal server error
  /token-usage:
    post:
      summary: Upload token usage data
      description: Uploads token usage data for an API call.
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: integer
                  example: 100
                prompt:
                  type: integer
                  example: 60
                completion:
                  type: integer
                  example: 40
      responses:
        "200":
          description: Token usage data uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token usage data uploaded successfully."
        "400":
          description: Invalid request (e.g., missing required fields)
        "500":
          description: Server error

    get:
      summary: Retrieve all token usage data
      description: Retrieves all token usage data for all users.
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Token usage data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    total:
                      type: integer
                      example: 100
                    prompt:
                      type: integer
                      example: 60
                    completion:
                      type: integer
                      example: 40
        "500":
          description: Server error

openapi: 3.0.0
info:
  title: Student Advisor API
  version: 1.0.0
  description: API for student advisor application
servers:
  - url: http://localhost:3001/
    description: Local development
  - url: https://{apiId}.execute-api.eu-north-1.amazonaws.com/Prod
    description: Production environment
    variables:
      apiId:
        default: 26jbdrdk5g
components:
  securitySchemes:
    CognitoAuth:
      type: oauth2
      x-oauth2-redirect-url: http://localhost/oauth2-redirect.html
      flows:
        implicit:
          authorizationUrl: https://eu-north-1cxdmnsswh.auth.eu-north-1.amazoncognito.com/oauth2/authorize
          clientId: 29sfsu3nvhqfsjjnimcgh9ejab
          redirectUrl: http://localhost/oauth2-redirect.html
          scopes: {}
paths:
  /hello:
    get:
      summary: Hello endpoint
      description: Returns a hello message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "hello"
  /goodbye/bye:
    get:
      summary: Goodbye endpoint
      description: Returns a goodbye message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "goodbye"
  /goodbye/seeya:
    get:
      summary: See ya endpoint
      description: Returns a see ya message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "see ya"
  /student:
    get:
      summary: Get student information
      description: Retrieves a student by ID
      security:
        - CognitoAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: Student ID
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  advisor:
                    type: string
        "404":
          description: Student not found
        "400":
          description: Invalid request
        "500":
          description: Server error
    put:
      summary: Create or update student
      description: Creates or updates a student record
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
                name:
                  type: string
                advisor:
                  type: string
      responses:
        "200":
          description: Student created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student created successfully"
        "400":
          description: Invalid request
        "500":
          description: Server error
    patch:
      summary: Partially update student information
      description: Updates only the `preferred_name` and `email` fields of a student record
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
                preferred_name:
                  type: string
                email:
                  type: string
                  format: email
                  description: The updated email of the student
      responses:
        "200":
          description: Student updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student updated successfully"
        "400":
          description: Invalid request
        "404":
          description: Student not found
        "500":
          description: Server error
  /student/check:
    get:
      summary: Check if student exists
      description: Checks if a student ID exists in the database
      security:
        - CognitoAuth: []
      parameters:
        - name: student_id
          in: query
          required: true
          description: Student ID to check
          schema:
            type: string
      responses:
        "200":
          description: Successful check
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: True if student exists, false otherwise
                    example: true
        "400":
          description: Invalid request (missing student_id parameter)
        "401":
          description: Unauthorized request (missing or invalid Cognito token)
        "500":
          description: Server error
  /chat:
    post:
      summary: Chat with the AI assistant
      description: Sends a message to the chatbot and receives a response.
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  example: "Hello, how can you help me?"
      responses:
        "200":
          description: Successful chatbot response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: "Hello! How can I assist you today?"
        "400":
          description: Invalid request (e.g., missing message field or malformed JSON)
        "401":
          description: Unauthorized request (missing or invalid Cognito token)
        "500":
          description: Internal server error

  /token-usage:
    post:
      summary: Upload token usage data
      description: Stores OpenAI API token usage data for a given student.
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                [student_id, total_tokens, prompt_tokens, completion_tokens]
              properties:
                student_id:
                  type: string
                  description: ID of the student.
                total_tokens:
                  type: integer
                  description: Total tokens used in the request.
                prompt_tokens:
                  type: integer
                  description: Tokens used in the prompt.
                completion_tokens:
                  type: integer
                  description: Tokens used in the response.
      responses:
        "201":
          description: Token usage recorded successfully.
        "400":
          description: Invalid request (e.g., missing fields, invalid data format).
        "401":
          description: Unauthorized request (missing or invalid Cognito token).
        "500":
          description: Internal server error.
    get:
      summary: Retrieve token usage data
      description: Fetches token usage data for a given student ID within a specified timeframe.
      security:
        - CognitoAuth: []
      parameters:
        - name: student_id
          in: query
          required: true
          description: ID of the student.
          schema:
            type: string
      responses:
        "200":
          description: Successful retrieval of token usage data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_id:
                    type: string
                  usage_records:
                    type: array
                    items:
                      type: object
                      properties:
                        total_tokens:
                          type: integer
                        prompt_tokens:
                          type: integer
                        completion_tokens:
                          type: integer
                        timestamp:
                          type: integer
                          description: Epoch timestamp (seconds since Unix epoch).
                          example: 1710512400 # Example: 2024-03-15 01:00:00 UTC
        "400":
          description: Invalid request (e.g., missing fields, invalid timestamp format).
        "401":
          description: Unauthorized request (missing or invalid Cognito token).
        "404":
          description: No token usage data found for the given student ID and timeframe.
        "500":
          description: Internal server error.
  /embedding:
    get:
      summary: Retrieve course embedding
      description: Retrieves the embedding for a given course.
      security:
        - CognitoAuth: []
      parameters:
        - name: course_id
          in: query
          required: true
          description: The course ID to retrieve the embedding.
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved course embedding
          content:
            application/json:
              schema:
                type: object
                properties:
                  course_id:
                    type: string
                  embedding:
                    type: array
                    items:
                      type: number
                    description: The retrieved embedding vector.
        "400":
          description: Invalid request (e.g., missing course_id or malformed query)
        "404":
          description: Course embedding not found
        "500":
          description: Internal server error.
  /embedding/text-embedding:
    post:
      summary: Generate a text embedding
      description: Generates an embedding for the provided text using OpenAI's embedding model.
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: The text to be embedded.
      responses:
        "200":
          description: Successful embedding generation
          content:
            application/json:
              schema:
                type: object
                properties:
                  embedding:
                    type: array
                    items:
                      type: number
                    description: The generated embedding vector.
        "400":
          description: Invalid request (e.g., missing text or malformed JSON)
        "500":
          description: Internal server error.
  /embedding/course-embedding:
    post:
      summary: Store course embedding
      description: Generates and stores an embedding for a course.
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - course_id
                - text
              properties:
                course_id:
                  type: string
                  description: The ID of the course.
                text:
                  type: string
                  description: The course description to be embedded.
      responses:
        "200":
          description: Successfully stored course embedding
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Embedding stored successfully"
        "400":
          description: Invalid request (e.g., missing course_id, text, or malformed JSON)
        "500":
          description: Internal server error.

openapi: 3.0.0
info:
  title: Student Advisor API
  version: 1.0.0
  description: API for student advisor application
servers:
  - url: http://localhost:3001/
    description: Local development
  - url: https://{apiId}.execute-api.eu-north-1.amazonaws.com/Prod
    description: Production environment
    variables:
      apiId:
        default: 26jbdrdk5g
components:
  securitySchemes:
    CognitoAuth:
      type: oauth2
      x-oauth2-redirect-url: http://localhost/oauth2-redirect.html
      flows:
        implicit:
          authorizationUrl: https://eu-north-1cxdmnsswh.auth.eu-north-1.amazoncognito.com/oauth2/authorize
          clientId: 29sfsu3nvhqfsjjnimcgh9ejab
          redirectUrl: http://localhost/oauth2-redirect.html
          scopes: {}
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: object
paths:
  /hello:
    get:
      summary: Hello endpoint
      description: Returns a hello message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "hello"
  /goodbye/bye:
    get:
      summary: Goodbye endpoint
      description: Returns a goodbye message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "goodbye"
  /goodbye/seeya:
    get:
      summary: See ya endpoint
      description: Returns a see ya message
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "see ya"
  /student:
    get:
      summary: Get student information
      description: Retrieves a student by ID
      security:
        - CognitoAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: Student ID
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  advisor:
                    type: string
        "404":
          description: Student not found
        "400":
          description: Invalid request
        "500":
          description: Server error
    put:
      summary: Create or update student
      description: Creates or updates a student record
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: string
                name:
                  type: string
                advisor:
                  type: string
      responses:
        "200":
          description: Student created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student created successfully"
        "400":
          description: Invalid request
        "500":
          description: Server error
  /llm:
    post:
      summary: Generate text using LLM
      description: Uses OpenAI API to generate text responses based on chat messages
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [messages]
              properties:
                model:
                  type: string
                  description: The OpenAI model to use
                  default: "gpt-4o-mini"
                  example: "gpt-4o-mini"
                messages:
                  type: array
                  description: Array of message objects representing a conversation
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role:
                        type: string
                        description: The role of the message sender (system, user, or assistant)
                        enum: [system, user, assistant]
                        example: "user"
                      content:
                        type: string
                        description: The content of the message
                        example: "Write a short paragraph about student advising"
                temperature:
                  type: number
                  description: Controls randomness (0-1). Lower values make responses more deterministic
                  minimum: 0
                  maximum: 1
                  default: 0.7
                  example: 0.7
                max_tokens:
                  type: integer
                  description: Maximum number of tokens to generate (optional)
                  example: 150
      responses:
        "200":
          description: Successfully generated text
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The generated text from the LLM
                    example: "Student advising is a collaborative process between advisors and students that helps students achieve their academic and career goals."
                  model:
                    type: string
                    description: The model used for generation
                    example: "gpt-4o-mini"
                  usage:
                    type: object
                    properties:
                      completion_tokens:
                        type: integer
                        description: Number of tokens in the completion
                        example: 24
                      prompt_tokens:
                        type: integer
                        description: Number of tokens in the prompt
                        example: 21
                      total_tokens:
                        type: integer
                        description: Total tokens used in the request and response
                        example: 45
                  id:
                    type: string
                    description: Unique identifier for the response
                    example: "chatcmpl-123456789abcdef"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method not allowed
        "500":
          description: Server error or OpenAI API error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  options:
    summary: CORS support
    description: Enable CORS by returning correct headers
    responses:
      "200":
        description: CORS enabled

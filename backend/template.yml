AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway with Cognito Authorization

Parameters:
  UserPoolArn:
    Type: String
    Description: ARN of the Cognito User Pool
    Default: "arn:aws:cognito-idp:eu-north-1:565393034649:userpool/eu-north-1_cXdMnsSwH"
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - prod
    Description: Environment type (dev or prod)
  OpenAIAPIKey:
    Type: String
    Description: OpenAI API Key for LLM access
    NoEcho: true # This prevents the key from being displayed in logs/console

Globals:
  Api:
    Auth:
    Cors:
      AllowMethods: "'GET,PUT,POST,PATCH,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token, Origin'"
      AllowOrigin: !If
        - IsDev
        - "'*'"
        - "'http://13.53.152.71'"
    Auth:
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !Ref UserPoolArn
          AuthType: COGNITO_USER_POOLS

Resources:
  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/hello_handler.lambda_handler
      Runtime: python3.12
      CodeUri: .
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        HelloEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  GoodbyeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/goodbye_handler.lambda_handler
      Runtime: python3.12
      CodeUri: .
      Environment:
        Variables:
          Environment: !Ref Environment
      Events:
        ByeEvent:
          Type: Api
          Properties:
            Path: /goodbye/bye
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        SeeyaEvent:
          Type: Api
          Properties:
            Path: /goodbye/seeya
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  DatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/database_handler.lambda_handler
      Runtime: python3.12
      Timeout: 10
      CodeUri: .
      Environment:
        Variables:
          Environment: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Environment}-student-advisor-table"
      Events:
        PutStudent:
          Type: Api
          Properties:
            Path: /student
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        GetStudent:
          Type: Api
          Properties:
            Path: /student
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        PatchStudent:
          Type: Api
          Properties:
            Path: /student
            Method: PATCH
            Auth:
              Authorizer: CognitoAuthorizer

  TokenUsageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/token_usage_handler.lambda_handler
      Runtime: python3.12
      CodeUri: .
      Environment:
        Variables:
          Environment: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Environment}-student-advisor-table"
      Events:
        UploadTokenUsage:
          Type: Api
          Properties:
            Path: /token-usage
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        GetTokenUsage:
          Type: Api
          Properties:
            Path: /token-usage
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer


  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/chat_handler.lambda_handler
      Runtime: python3.12
      Timeout: 10
      CodeUri: .
      Environment:
        Variables:
          Environment: !Ref Environment
          OPENAI_API_KEY: !Ref OpenAIAPIKey
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Environment}-student-advisor-table"
      Events:
        ChatEvent:
          Type: Api
          Properties:
            Path: /chat
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        CheckStudentEvent:
          Type: Api
          Properties:
            Path: /student/check
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  EmbeddingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/embedding_handler.lambda_handler
      Runtime: python3.12
      CodeUri: .
      Environment:
        Variables:
          Environment: !Ref Environment
          OPENAI_API_KEY: !Ref OpenAIAPIKey
          OPENSEARCH_HOST: !Ref OpensearchHost
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Environment}-student-advisor-table"
        # Possible TODO: AWS IAM or ES Policy
      Events:
        GenerateCourseEmbedding:
          Type: Api
          Properties:
            Path: /embedding
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        RetrieveCourseEmbedding:
          Type: Api
          Properties:
            Path: /embedding
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  ApiUrl:
    Description: "URL of the API Gateway endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

Conditions:
  IsDev: !Equals
    - !Ref Environment
    - dev